generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  OWNER
  MANAGER
  MECHANIC
  VIEWER
}

enum SubscriptionPlan {
  TRIAL
  STARTER
  PRO
}

enum AmpelStatus {
  GREEN
  ORANGE
  RED
}

enum AppointmentStatus {
  REQUESTED
  CONFIRMED
  DECLINED
  CANCELLED
}

enum NotificationChannel {
  IN_APP
  EMAIL
}

enum NotificationType {
  SERVICE_DUE
  SERVICE_OVERDUE
  TUV_DUE
  TUV_OVERDUE
  APPOINTMENT_STATUS
  TRIAL_EXPIRING
  BILLING_EVENT
}

enum MileageUnit {
  KILOMETERS
  MILES
}

model User {
  id                String              @id @default(uuid())
  email             String              @unique @db.VarChar(191)
  passwordHash      String              @db.VarChar(255)
  firstName         String?             @db.VarChar(120)
  lastName          String?             @db.VarChar(120)
  locale            String              @default("de") @db.VarChar(12)
  superAdmin        Boolean             @default(false)
  twoFactorEnabled  Boolean             @default(false)
  twoFactorSecret   String?             @db.VarChar(255)
  lastLoginAt       DateTime?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  deletedAt         DateTime?

  memberships       TenantMembership[]
  invitations       TenantMembership[]  @relation("TenantInvitations")
  mileageEntries    VehicleMileage[]
  serviceEntries    ServiceEntry[]      @relation("ServiceEntryCreatedBy")
  repairEntries     RepairEntry[]       @relation("RepairEntryCreatedBy")
  appointmentRequests Appointment[]
  notifications     Notification[]
  auditLogs         AuditLog[]          @relation("AuditActor")

  @@index([email])
}

model Tenant {
  id                  String                 @id @default(uuid())
  name                String                 @db.VarChar(191)
  slug                String                 @unique @db.VarChar(191)
  plan                SubscriptionPlan       @default(TRIAL)
  timezone            String                 @default("Europe/Berlin") @db.VarChar(64)
  leadDays            Int                    @default(40)
  trialEndsAt         DateTime?
  readOnlySince       DateTime?
  servicePartnerEmail String?                @db.VarChar(191)
  mailSender          String?                @db.VarChar(191)
  logoUrl             String?                @db.VarChar(512)
  theme               Json?
  settings            Json                   @default("{}")
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  deletedAt           DateTime?

  memberships         TenantMembership[]
  vehicles            Vehicle[]
  mileageEntries      VehicleMileage[]
  tuvRecords          VehicleTuv[]
  serviceTypes        ServiceType[]
  serviceSchedules    VehicleServiceSchedule[]
  serviceEntries      ServiceEntry[]
  repairEntries       RepairEntry[]
  repairDocuments     RepairDocument[]
  appointments        Appointment[]
  notifications       Notification[]
  auditLogs           AuditLog[]
  subscriptions       Subscription[]
  featureFlags        FeatureFlag[]
  webhookEndpoints    WebhookEndpoint[]

  @@index([plan])
  @@fulltext([name])
}

model TenantMembership {
  id           String   @id @default(uuid())
  tenantId     String
  userId       String
  role         UserRole @default(MANAGER)
  invitedById  String?
  invitedAt    DateTime?
  acceptedAt   DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  tenant       Tenant   @relation(fields: [tenantId], references: [id])
  user         User     @relation(fields: [userId], references: [id])
  invitedBy    User?    @relation("TenantInvitations", fields: [invitedById], references: [id])

  @@unique([tenantId, userId])
  @@index([tenantId, role])
}

model Vehicle {
  id             String                 @id @default(uuid())
  tenantId       String
  label          String                 @db.VarChar(191)
  licensePlate   String                 @db.VarChar(64)
  vin            String?                @db.VarChar(64)
  brand          String?                @db.VarChar(80)
  model          String?                @db.VarChar(80)
  productionYear Int?
  currentMileage Int                    @default(0)
  mileageUnit    MileageUnit            @default(KILOMETERS)
  assignedDriver String?                @db.VarChar(120)
  isActive       Boolean                @default(true)
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
  archivedAt     DateTime?

  tenant         Tenant                 @relation(fields: [tenantId], references: [id])
  mileageLogs    VehicleMileage[]
  tuvRecords     VehicleTuv[]
  serviceSchedules VehicleServiceSchedule[]
  services       ServiceEntry[]
  repairs        RepairEntry[]
  appointments   Appointment[]

  @@index([tenantId, isActive])
  @@unique([tenantId, licensePlate])
}

model VehicleMileage {
  id           String   @id @default(uuid())
  tenantId     String
  vehicleId    String
  recordedById String?
  value        Int
  recordedAt   DateTime
  createdAt    DateTime @default(now())

  tenant       Tenant   @relation(fields: [tenantId], references: [id])
  vehicle      Vehicle  @relation(fields: [vehicleId], references: [id])
  recordedBy   User?    @relation(fields: [recordedById], references: [id])

  @@index([vehicleId, recordedAt])
  @@index([tenantId, recordedAt])
}

model VehicleTuv {
  id         String      @id @default(uuid())
  tenantId   String
  vehicleId  String
  dueDate    DateTime
  issuedAt   DateTime?
  status     AmpelStatus @default(GREEN)
  note       String?     @db.VarChar(255)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  tenant     Tenant      @relation(fields: [tenantId], references: [id])
  vehicle    Vehicle     @relation(fields: [vehicleId], references: [id])

  @@index([tenantId, dueDate])
}

model ServiceType {
  id                String                  @id @default(uuid())
  tenantId          String
  name              String                  @db.VarChar(120)
  description       String?                 @db.VarChar(512)
  defaultIntervalKm Int?
  defaultIntervalDays Int?
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @updatedAt

  tenant            Tenant                  @relation(fields: [tenantId], references: [id])
  schedules         VehicleServiceSchedule[]
  services          ServiceEntry[]

  @@unique([tenantId, name])
}

model VehicleServiceSchedule {
  id             String      @id @default(uuid())
  tenantId       String
  vehicleId      String
  serviceTypeId  String
  lastDoneAt     DateTime?
  lastMileage    Int?
  nextDueDate    DateTime?
  nextDueMileage Int?
  status         AmpelStatus @default(GREEN)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  tenant         Tenant      @relation(fields: [tenantId], references: [id])
  vehicle        Vehicle     @relation(fields: [vehicleId], references: [id])
  serviceType    ServiceType @relation(fields: [serviceTypeId], references: [id])

  @@unique([vehicleId, serviceTypeId])
  @@index([tenantId, status])
}

model ServiceEntry {
  id            String      @id @default(uuid())
  tenantId      String
  vehicleId     String
  serviceTypeId String?
  title         String      @db.VarChar(191)
  description   String?
  performedAt   DateTime
  mileage       Int
  cost          Decimal?    @db.Decimal(12, 2)
  createdById   String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  tenant        Tenant      @relation(fields: [tenantId], references: [id])
  vehicle       Vehicle     @relation(fields: [vehicleId], references: [id])
  serviceType   ServiceType? @relation(fields: [serviceTypeId], references: [id])
  createdBy     User?       @relation("ServiceEntryCreatedBy", fields: [createdById], references: [id])
  documents     RepairDocument[]

  @@index([tenantId, performedAt])
  @@index([vehicleId, performedAt])
}

model RepairEntry {
  id            String      @id @default(uuid())
  tenantId      String
  vehicleId     String
  title         String      @db.VarChar(191)
  description   String?
  performedAt   DateTime
  mileage       Int
  cost          Decimal?    @db.Decimal(12, 2)
  warrantyUntil DateTime?
  createdById   String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  tenant        Tenant      @relation(fields: [tenantId], references: [id])
  vehicle       Vehicle     @relation(fields: [vehicleId], references: [id])
  createdBy     User?       @relation("RepairEntryCreatedBy", fields: [createdById], references: [id])
  documents     RepairDocument[]

  @@index([tenantId, performedAt])
  @@index([vehicleId, performedAt])
}

model RepairDocument {
  id          String      @id @default(uuid())
  tenantId    String
  serviceEntryId String?
  repairEntryId  String?
  fileKey     String      @db.VarChar(512)
  fileName    String      @db.VarChar(191)
  fileSize    Int
  mimeType    String      @db.VarChar(120)
  uploadedAt  DateTime    @default(now())

  tenant      Tenant      @relation(fields: [tenantId], references: [id])
  serviceEntry ServiceEntry? @relation(fields: [serviceEntryId], references: [id])
  repairEntry  RepairEntry?  @relation(fields: [repairEntryId], references: [id])

  @@index([tenantId, uploadedAt])
}

model Appointment {
  id              String            @id @default(uuid())
  tenantId        String
  vehicleId       String?
  requestedById   String
  status          AppointmentStatus @default(REQUESTED)
  requestedDate   DateTime
  preferredDate   DateTime?
  confirmedDate   DateTime?
  note            String?           @db.VarChar(1024)
  serviceSummary  String?           @db.VarChar(255)
  contactEmail    String?           @db.VarChar(191)
  contactPhone    String?           @db.VarChar(64)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  tenant          Tenant            @relation(fields: [tenantId], references: [id])
  vehicle         Vehicle?          @relation(fields: [vehicleId], references: [id])
  requestedBy     User              @relation(fields: [requestedById], references: [id])

  @@index([tenantId, status])
}

model Notification {
  id         String              @id @default(uuid())
  tenantId   String
  userId     String?
  channel    NotificationChannel @default(IN_APP)
  type       NotificationType
  subject    String              @db.VarChar(191)
  body       String?
  payload    Json
  readAt     DateTime?
  sentAt     DateTime?
  createdAt  DateTime            @default(now())

  tenant     Tenant              @relation(fields: [tenantId], references: [id])
  user       User?               @relation(fields: [userId], references: [id])
}

model Subscription {
  id                 String            @id @default(uuid())
  tenantId           String
  externalId         String?           @db.VarChar(191)
  customerId         String?           @db.VarChar(191)
  plan               SubscriptionPlan
  status             String            @db.VarChar(32)
  trialEndsAt        DateTime?
  currentPeriodEnd   DateTime?
  cancelAtPeriodEnd  Boolean           @default(false)
  metadata           Json              @default("{}")
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt

  tenant             Tenant            @relation(fields: [tenantId], references: [id])

  @@index([tenantId, plan])
}

model FeatureFlag {
  id         String    @id @default(uuid())
  tenantId   String?
  key        String    @db.VarChar(120)
  isEnabled  Boolean   @default(false)
  payload    Json?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  tenant     Tenant?   @relation(fields: [tenantId], references: [id])

  @@unique([key, tenantId])
}

model WebhookEndpoint {
  id          String   @id @default(uuid())
  tenantId    String
  url         String   @db.VarChar(512)
  description String?  @db.VarChar(255)
  secret      String   @db.VarChar(191)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tenant      Tenant   @relation(fields: [tenantId], references: [id])
}

model AuditLog {
  id          String   @id @default(uuid())
  tenantId    String?
  actorId     String?
  action      String   @db.VarChar(120)
  target      String?  @db.VarChar(191)
  metadata    Json
  ipAddress   String?  @db.VarChar(64)
  userAgent   String?  @db.VarChar(255)
  createdAt   DateTime @default(now())

  tenant      Tenant?  @relation(fields: [tenantId], references: [id])
  actor       User?    @relation("AuditActor", fields: [actorId], references: [id])

  @@index([tenantId, createdAt])
}
